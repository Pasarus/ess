# SPDX-License-Identifier: BSD-3-Clause
# Copyright (c) 2021 Scipp contributors (https://github.com/scipp)
import numpy as np
import scipp as sc


def _deg_to_rad(x):
    """
    Convert degrees to radians.
    """
    return x * (np.pi * sc.units.rad / (180.0 * sc.units.deg))


def _to_angular_frequency(f):
    """
    Convert frequency in Hz to angular frequency.
    """
    return (2.0 * np.pi * sc.units.rad) * f


def choppers(parameters=None):
    """
    Create V20 chopper cascade and component positions.
    Chopper opening angles taken from Woracek et al. (2016)
    https://doi.org/10.1016/j.nima.2016.09.034

    To override the default chopper parameters, you can supply a dict
    containing the chopper name ("WFM1" or "FOL2") and a sub-dict of parameters
    such as frequency or tdc.
    For example:
        choppers({"WFM1": {"frequency": 17., "phase": 55.}})
    Frequencies are in Hz and angles are in degrees.
    For components distances, we assume that the origin is the source double
    chopper, and the direction of the beam is along `z`.
    """

    default_choppers = {
        "WFM1": {
            "frequency": 70.0,
            "phase": 47.10,
            "distance": [0, 0, 6.6],
            "frame_start":
            np.array([83.71, 140.49, 193.26, 242.32, 287.91, 330.3]),
            "frame_end":
            np.array([94.7, 155.79, 212.56, 265.33, 314.37, 360.0]),
            "tdc": 15.0
        },
        "WFM2": {
            "frequency": 70.0,
            "phase": 76.76,
            "distance": [0, 0, 7.1],
            "frame_start":
            np.array([65.04, 126.1, 182.88, 235.67, 284.73, 330.00]),
            "frame_end":
            np.array([76.03, 141.4, 202.18, 254.97, 307.74, 360.0]),
            "tdc": 15.0
        },
        "FOL1": {
            "frequency": 56.0,
            "phase": 62.40,
            "distance": [0, 0, 8.8],
            "frame_start":
            np.array([64.35, 125.05, 183.41, 236.4, 287.04, 335.53]),
            "frame_end":
            np.array([84.99, 148.29, 205.22, 254.27, 302.8, 360.0]),
            "tdc": 15.0
        },
        "FOL2": {
            "frequency":
            28.0,
            "phase":
            12.27,
            "distance": [0, 0, 15.9],
            "frame_start":
            np.array([79.78, 136.41, 191.73, 240.81, 287.13, 330.89]),
            "frame_end":
            np.array([116.38, 172.47, 221.94, 267.69, 311.69, 360.0]),
            "tdc":
            15.0
        }
    }

    if parameters is not None:
        for chopper, params in parameters.items():
            default_choppers[chopper].update(params)

    inventory = {key: [] for key in default_choppers["WFM1"]}
    for chopper in default_choppers.values():
        for key, value in chopper.items():
            inventory[key].append(value)

    ds = sc.Dataset()

    ds["choppers"] = sc.array(dims=["chopper"],
                              values=list(default_choppers.keys()))

    ds["angular_frequency"] = _to_angular_frequency(
        sc.array(dims=["chopper"],
                 values=inventory["frequency"],
                 unit=(sc.units.one / sc.units.s)))

    ds["phase"] = _deg_to_rad(
        sc.array(dims=["chopper"],
                 values=inventory["phase"],
                 unit=sc.units.deg))

    ds["distance"] = sc.array(dims=["chopper"],
                              values=inventory["distance"],
                              unit=sc.units.m,
                              dtype=sc.dtype.vector_3_float64)

    tdc_array = np.array(inventory["tdc"]).reshape(4, 1)

    for key in ["frame_start", "frame_end"]:
        ds[key] = _deg_to_rad(
            sc.array(dims=["chopper", "frame"],
                     values=np.concatenate(inventory[key]).reshape(4, 6) +
                     tdc_array,
                     unit=sc.units.deg))

    # Length of ESS pulse.
    # Note that this is generated by source choppers at V20, but for simplicity
    # we hard-code the value here.
    ds["pulse_length"] = 2.86e+03 * sc.units.us

    return ds
